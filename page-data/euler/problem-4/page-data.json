{"componentChunkName":"component---src-templates-euler-tsx","path":"/euler/problem-4/","result":{"data":{"mdx":{"fields":{"slug":"/problem-4/"},"frontmatter":{"posttype":"euler","tags":["Project Euler","Python","Java","C"],"title":"Problem 4","date":"2020-04-03"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"posttype\": \"euler\",\n  \"title\": \"Problem 4\",\n  \"date\": \"2020-04-03\",\n  \"tags\": [\"Project Euler\", \"Python\", \"Java\", \"C\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Card, {\n    title: \"Problem 4 - Largest Palindrome Product\",\n    mdxType: \"Card\"\n  }, \"A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \\xD7 99. Find the largest palindrome made from the product of two 3-digit numbers.\"), mdx(EulerSolution, {\n    mdxType: \"EulerSolution\"\n  }, \"Since there are only 900 3-digit numbers, checking all possibilities of products of 3 digit numbers gives \", mdx(InlineMath, {\n    math: \"900^2 = 810,000\",\n    mdxType: \"InlineMath\"\n  }), \" \", \"possibilities. To eliminate redundancies, we can check only half (for example\", \" \", mdx(InlineMath, {\n    math: \"100 \\\\cdot 200 = 200 \\\\cdot 100\",\n    mdxType: \"InlineMath\"\n  }), \"). This leaves 40,500 combinations to be checked. After multiplying each pair, we check to see if it is a palindrome and if the number is greater than the current max palindrome.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/problem-4/","prev":{"frontmatter":{"title":"Problem 3","date":"2020-04-03","tags":["Project Euler","Python","Java","C"]},"fields":{"slug":"/problem-3/"}},"next":{"frontmatter":{"title":"Problem 5","date":"2020-04-03","tags":["Project Euler","Python","C"]},"fields":{"slug":"/problem-5/"}}}}}